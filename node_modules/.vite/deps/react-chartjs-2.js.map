{
  "version": 3,
  "sources": ["../../react-chartjs-2/src/utils.ts", "../../react-chartjs-2/src/chart.tsx", "../../react-chartjs-2/src/typedCharts.tsx"],
  "sourcesContent": ["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  Object.assign(chart.options, nextOptions);\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n", "import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n", "import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,sBAAsB;SAEZC,aAAgBC,KAAsBC,OAAU;AAC9D,MAAI,OAAOD,QAAQ,YAAY;AAC7BA,QAAIC,KAAK;aACAD,KAAK;AACdA,QAAIE,UAAUD;;AAElB;SAEgBE,WAIdC,OAAoCC,aAAkC;AACtEC,SAAOC,OAAOH,MAAMI,SAASH,WAAW;AAC1C;SAEgBI,UAKdC,aACAC,YACA;AACAD,cAAYE,SAASD;AACvB;SAEgBE,YAKdH,aACAI,cAEA;MADAC,eAAY,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAGjB;AAEf,QAAMkB,gBAA8C,CAAA;AAEpDN,cAAYO,WAAWH,aAAaI,IAAG,CACpCC,gBAAyC;AAExC,UAAMC,iBAAiBV,YAAYO,SAASI;MAAI,CAC7CC,YACCA,QAAQP,YAAY,MAAMI,YAAYJ,YAAY;;AAItD,QAAA,CACGK,kBAAc,CACdD,YAAYI,QACbP,cAAcQ,SAASJ,cAAc,GACrC;AACA,aAAO;WAAKD;;;AAGdH,kBAAcS,KAAKL,cAAc;AAEjCd,WAAOC,OAAOa,gBAAgBD,WAAW;AAEzC,WAAOC;GACR;AAEL;SAEgBM,UAIdH,MAA2E;MAApCR,eAAY,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAGjB;AACtD,QAAM6B,WAA4C;IAChDf,QAAQ,CAAA;IACRK,UAAU,CAAA;;AAGZR,YAAUkB,UAAUJ,KAAKX,MAAM;AAC/BC,cAAYc,UAAUJ,KAAKN,UAAUF,YAAY;AAEjD,SAAOY;AACT;SAQgBC,kBACdxB,OACAyB,OACA;AACA,SAAOzB,MAAM0B,0BACXD,MAAME,aACN,WACA;IAAEC,WAAW;KACb,KAAK;AAET;SAQgBC,kBACd7B,OACAyB,OACA;AACA,SAAOzB,MAAM0B,0BACXD,MAAME,aACN,WACA;IAAEC,WAAW;KACb,KAAK;AAET;SAQgBE,mBACd9B,OACAyB,OACA;AACA,SAAOzB,MAAM0B,0BACXD,MAAME,aACN,SACA;IAAEC,WAAW;KACb,KAAK;AAET;SCrISG,eAKP,OAaAnC,KACA;MAdA,EACEoC,SAAS,KACTC,QAAQ,KACRC,SAAS,OACTvB,cACAwB,MACAhB,MACAf,SACAgC,UAAU,CAAA,GACVC,iBACAC,YAAU,GACPC,MAAK,IAXV;AAiBA,QAAMC,gBAAYC,qBAA0B,IAAI;AAChD,QAAMC,eAAWD,qBAAM;AAEvB,QAAME,cAAW,MAAS;AACxB,QAAA,CAAKH,UAAU1C;AAAS;AAExB4C,aAAS5C,UAAU,IAAI8C,MAAQJ,UAAU1C,SAAS;MAChDqC;MACAhB,MAAMG,UAAUH,MAAMR,YAAY;MAClCP,SAASA,WAAW;WAAKA;;MACzBgC;KACD;AAEDzC,iBAAaC,KAAK8C,SAAS5C,OAAO;;AAGpC,QAAM+C,eAAY,MAAS;AACzBlD,iBAAaC,KAAK,IAAI;AAEtB,QAAI8C,SAAS5C,SAAS;AACpB4C,eAAS5C,QAAQgD,QAAO;AACxBJ,eAAS5C,UAAU;;;AAIvBiD,8BAAS,MAAO;AACd,QAAA,CAAKb,UAAUQ,SAAS5C,WAAWM,SAAS;AAC1CL,iBAAW2C,SAAS5C,SAASM,OAAO;;KAErC;IAAC8B;IAAQ9B;GAAQ;AAEpB2C,8BAAS,MAAO;AACd,QAAA,CAAKb,UAAUQ,SAAS5C,SAAS;AAC/BO,gBAAUqC,SAAS5C,QAAQkD,OAAO7B,MAAMA,KAAKX,MAAM;;KAEpD;IAAC0B;IAAQf,KAAKX;GAAO;AAExBuC,8BAAS,MAAO;AACd,QAAA,CAAKb,UAAUQ,SAAS5C,WAAWqB,KAAKN,UAAU;AAChDJ,kBAAYiC,SAAS5C,QAAQkD,OAAO7B,MAAMA,KAAKN,UAAUF,YAAY;;KAEtE;IAACuB;IAAQf,KAAKN;GAAS;AAE1BkC,8BAAS,MAAO;AACd,QAAA,CAAKL,SAAS5C;AAAS;AAEvB,QAAIoC,QAAQ;AACVW,mBAAY;AACZI,iBAAWN,WAAW;WACjB;AACLD,eAAS5C,QAAQoD,OAAOZ,UAAU;;KAEnC;IAACJ;IAAQ9B;IAASe,KAAKX;IAAQW,KAAKN;IAAUyB;GAAW;AAE5DS,8BAAS,MAAO;AACd,QAAA,CAAKL,SAAS5C;AAAS;AAEvB+C,iBAAY;AACZI,eAAWN,WAAW;KACrB;IAACR;GAAK;AAETY,8BAAS,MAAO;AACdJ,gBAAW;AAEX,WAAA,MAAaE,aAAY;KACxB,CAAA,CAAE;AAEL,SAAA,aAAAM,QAAA,cACGC,UAAAA,OAAAA,OAAAA;IAAOxD,KAAK4C;IAAWa,MAAK;IAAMrB;IAAgBC;KAAkBM,KAAK,GACvEF,eAAe;AAGtB;AAEY,IAACiB,aAAQC,yBAAWxB,cAAc;SCxFrCyB,iBACPrB,MACAsB,eACA;AACAb,QAAQc,SAASD,aAAa;AAE9B,aAAOF;IAAU,CACdhB,OAAO3C,QAAG,aAAAuD,QAAA,cAAMG,QAAK,OAAA,OAAA,CAAA,GAAKf,OAAK;MAAE3C;MAAUuC;;;AAEhD;AAEY,IAACwB,OAAuBH,iBAAiB,QAAQI,cAAc;AAE/D,IAACC,MAAsBL,iBAAiB,OAAOM,aAAa;AAE5D,IAACC,QAAwBP,iBAAiB,SAASQ,eAAe;AAElE,IAACC,WAA2BT,iBACtC,YACAU,kBAAkB;AAGR,IAACC,YAA4BX,iBACvC,aACAY,mBAAmB;AAGT,IAACC,SAAyBb,iBACpC,UACAc,gBAAgB;AAGN,IAACC,MAAsBf,iBAAiB,OAAOgB,aAAa;AAE5D,IAACC,UAA0BjB,iBACrC,WACAkB,iBAAiB;",
  "names": ["defaultDatasetIdKey", "reforwardRef", "ref", "value", "current", "setOptions", "chart", "nextOptions", "Object", "assign", "options", "setLabels", "currentData", "nextLabels", "labels", "setDatasets", "nextDatasets", "datasetIdKey", "addedDatasets", "datasets", "map", "nextDataset", "currentDataset", "find", "dataset", "data", "includes", "push", "cloneData", "nextData", "getDatasetAtEvent", "event", "getElementsAtEventForMode", "nativeEvent", "intersect", "getElementAtEvent", "getElementsAtEvent", "ChartComponent", "height", "width", "redraw", "type", "plugins", "fallbackContent", "updateMode", "props", "canvasRef", "useRef", "chartRef", "renderChart", "ChartJS", "destroyChart", "destroy", "useEffect", "config", "setTimeout", "update", "React", "canvas", "role", "Chart", "forwardRef", "createTypedChart", "registerables", "register", "Line", "LineController", "Bar", "BarController", "Radar", "RadarController", "Doughnut", "DoughnutController", "PolarArea", "PolarAreaController", "Bubble", "BubbleController", "Pie", "PieController", "Scatter", "ScatterController"]
}
